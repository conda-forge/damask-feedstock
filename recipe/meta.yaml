{% set build_number = 1 %}
{% set version = "3.0.1" %}
{% set sha256 = "3db1231f6763356e71b3bb91f66f1abb4fdae2721ce85754fc468446f3d74882" %}

# win: no PETSc, only python

package:
  name: damask-pkgs
  version: {{ version }}

source:
  url: https://damask-multiphysics.org/download/damask-{{ version }}.tar.xz
  sha256: {{ sha256 }}
  patches:
    - HDF5-Fortran.patch
    - compiler-options.patch
    - ldflags.patch

build:
  number: {{ build_number }}

outputs:
  - name: damask-grid
    script: build_grid.sh
    build:
      skip: true  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib("c") }}
        - {{ stdlib("c") }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
        - libgomp  # [linux]
        - llvm-openmp  # [osx]
        - pkg-config  # [osx]
        - cmake
        - make
        - openmpi  # [mpi == 'openmpi' and build_platform != target_platform]
      host:
        - {{ mpi }}
        - petsc
        - petsc * real_*
        - hdf5
        - hdf5 * mpi_{{ mpi }}_*
        - libfyaml
        - zlib
        - fftw
        - fftw * mpi_{{ mpi }}_*
      run:
        - hypre
        - {{ pin_compatible('petsc', max_pin='x.x') }}
        - {{ pin_compatible('hdf5', max_pin='x.x') }}
      run_constrained:
        - damask =={{ version }}
    test:
      source_files:
        - examples/grid/tensionX.yaml
        - examples/grid/20grains16x16x16.vti
        - examples/grid/material.yaml
      commands:
        - export OMP_NUM_THREADS=2
        - export EXAMPLE_DIR=$(pwd)/examples/grid
        - if [[ $CONDA_BUILD_CROSS_COMPILATION != '1' ]]; then mpirun -np 2 DAMASK_grid; fi
        # simulation is extremly slow, resulting in timeout
        #- if [[ $CONDA_BUILD_CROSS_COMPILATION != '1' ]]; then mpirun -np 2 DAMASK_grid -w $(mktemp -d) -l ${EXAMPLE_DIR}/tensionX.yaml -g ${EXAMPLE_DIR}/20grains16x16x16.vti -m ${EXAMPLE_DIR}/material.yaml; fi

  - name: damask-mesh
    script: build_mesh.sh
    build:
      skip: true  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib("c") }}
        - {{ stdlib("c") }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
        - libgomp  # [linux]
        - llvm-openmp  # [osx]
        - pkg-config  # [osx]
        - cmake
        - make
        - openmpi  # [mpi == 'openmpi' and build_platform != target_platform]
      host:
        - {{ mpi }}
        - petsc
        - petsc * real_*
        - hdf5
        - hdf5 * mpi_{{ mpi }}_*
        - libfyaml
        - zlib
      run:
        - hypre
        - {{ pin_compatible('petsc', max_pin='x.x') }}
        - {{ pin_compatible('hdf5', max_pin='x.x') }}
      run_constrained:
        - damask =={{ version }}
    test:
      source_files:
        - examples/mesh/tensionY_mono.yaml
        - examples/mesh/monocrystal.msh
        - examples/mesh/material.yaml
      commands:
        - export OMP_NUM_THREADS=2
        - export EXAMPLE_DIR=$(pwd)/examples/mesh
        - if [[ $CONDA_BUILD_CROSS_COMPILATION != '1' ]]; then mpirun -np 2 DAMASK_mesh; fi

  - name: python-damask
    build:
      script: python -m pip install ./python --no-deps -vv
      skip: true  # [py<38]
    requirements:
      build:
        - {{ cdt('mesa-libgl-devel') }}  # [linux]
        - {{ cdt('mesa-dri-drivers') }}  # [linux]
        - {{ cdt('libselinux') }}  # [linux]
        - {{ cdt('libxdamage') }}  # [linux]
        - {{ cdt('libxxf86vm') }}  # [linux]
        - {{ cdt('libxext') }}     # [linux]
        - python                                 # [build_platform != target_platform]
        - pip                                    # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
      host:
        - xorg-libxfixes  # [linux]
        - python
        - pip
        - setuptools
      run:
        - python
        - pandas
        - scipy
        - h5py >=3.3.0
        - vtk
        - matplotlib-base
        - pyyaml
      run_constrained:
        - damask =={{ version }}
    test:
      imports:
        - damask

  - name: damask
    build:
      script:
        - "echo DAMASK metapackage"
      skip: true  # [py<38 or win]
    requirements:
      host:
        - python
      run:
        - python
        - {{ mpi }}
        - {{ pin_subpackage('damask-mesh', exact=True) }}
        - {{ pin_subpackage('damask-grid', exact=True) }}
        - {{ pin_subpackage('python-damask', exact=True) }}
    test:
      commands:
        - if [[ $CONDA_BUILD_CROSS_COMPILATION != '1' ]]; then DAMASK_grid -h; DAMASK_mesh -h; fi
      imports:
        - damask

about:
  home: https://damask-multiphysics.org
  license: AGPL-3.0-or-later
  license_file:
    - LICENSE
    - COPYING
  summary: 'Duesseldorf Advanced Material Simulation Kit'

  description: |
    At the core of DAMASK is a flexible and hierarchically structured
    model of material point behavior for the solution of elastoplastic
    boundary value problems along with damage and thermal physics. Its
    main purpose is the simulation of crystal plasticity within a
    finite-strain continuum mechanical framework.
  doc_url: https://damask-multiphysics.org/documentation
  dev_url: https://damask-multiphysics.org/development

extra:
  recipe-maintainers:
    - MarDiehl
